{
  "formik-import": {
    "prefix": ["formik import"],
    "body": ["import { Formik } from 'formik'"],
    "scope": "javascript,javascriptreact"
  },
  "formik": {
    "prefix": ["formik component"],
    "body": [
      "const ${1:BasicExample} = () => (",
      "    <Formik",
      "      initialValues={{ ${2:values} }}",
      "      onSubmit={(values, actions) => {",
      "        setTimeout(() => {",
      "          alert(JSON.stringify(values, null, 2));",
      "          actions.setSubmitting(false);",
      "        }, 1000);",
      "      }}",
      "    >",
      "      {props => (",
      "        <form onSubmit={props.handleSubmit}>",
      "          ${3:children}",
      "        </form>",
      "      )}",
      "    </Formik>",
      ");"
    ],
    "scope": "javascript,javascriptreact",
    "description": "<Formik>\nis a component that helps you with building forms. It uses a render props pattern made popular by libraries like React Motion and React Router."
  },
  "formik-error-message": {
    "prefix": ["formik error-message", "error-message"],
    "body": ["<ErrorMessage component=\"${1:div}\" name=\"${2:name}\" />"],
    "scope": "javascript,javascriptreact",
    "description": "<ErrorMessage />\nis a component that renders the error message of a given field if that field has been visited (i.e.touched[name] === true) (and there is an error message present)."
  },
  "formik-field": {
    "prefix": ["formik field", "field"],
    "body": ["<Field name=\"${1:name}\" placeholder=\"${2:placeholder}\"/>"],
    "scope": "javascript,javascriptreact",
    "description": "<Field />\nwill automagically hook up inputs to Formik. It uses the name attribute to match up with Formik state. <Field /> will default to an HTML <input /> element."
  },
  "formik-use-field": {
    "prefix": ["formik use-field", "use-field"],
    "body": ["const [field, meta, helpers] = useField(${1:props});"],
    "scope": "javascript,javascriptreact",
    "description": "useField\nis a custom React hook that will automagically help you hook up inputs to Formik. You can and should use it to build your own custom input primitives."
  },
  "formik-use-formik-context": {
    "prefix": ["formik use-formik-context", "use-formik-context"],
    "body": ["const { values, submitForm } = useFormikContext();"],
    "scope": "javascript,javascriptreact",
    "description": "useFormikContext()\nis a custom React hook that will return all Formik state and helpers via React Context."
  },
  "formik-use": {
    "prefix": ["formik use-formik", "use-formik"],
    "body": [
      "const ${1:SignupForm} = () => {",
      "  const ${2:formik} = useFormik({",
      "    initialValues: {${3:values}},",
      "    onSubmit: values => {",
      "      alert(JSON.stringify(values, null, 2));",
      "    },",
      "  });",
      "  return (",
      "    <form onSubmit={${2:formik}.handleSubmit}>",
      "     ${4:children}",
      "    </form>",
      "  );",
      "};"
    ],
    "scope": "javascript,javascriptreact",
    "description": "useFormik()\nis a custom React hook that will return all Formik state and helpers directly."
  },
  "formik-with": {
    "prefix": ["formik with-formik", "with-formik"],
    "body": [
      "const ${1:MyEnhancedForm} = withFormik({",
      "  mapPropsToValues: () => ({ ${1:name}: '' }),",
      "",
      "  // Custom sync validation",
      "  validate: values => {",
      "    const errors = {};",
      "",
      "    if (!values.${1:name}) {",
      "      errors.${1:name} = '${2:Required}';",
      "    }",
      "",
      "    return errors;",
      "  },",
      "",
      "  handleSubmit: (values, { setSubmitting }) => {",
      "    setTimeout(() => {",
      "      alert(JSON.stringify(values, null, 2));",
      "      setSubmitting(false);",
      "    }, 1000);",
      "  },",
      "",
      "  displayName: 'BasicForm',",
      "})(${3:MyForm});"
    ],
    "scope": "javascript,javascriptreact",
    "description": "withFormik()\nCreate a higher-order React component class that passes props and form handlers (the 'FormikBag') into your component derived from supplied options."
  }
}
